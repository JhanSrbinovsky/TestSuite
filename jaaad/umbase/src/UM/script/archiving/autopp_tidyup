#!/bin/ksh
# *****************************COPYRIGHT******************************
# (C) Crown copyright Met Office. All rights reserved.
# For further details please refer to the file COPYRIGHT.txt
# which you should have received as part of this distribution.
# *****************************COPYRIGHT******************************
#
#  Script: autopp_tidyup
#
#  Purpose: Tidy up archiving after system or archive server failure
#           for previous run.
#           Input contents of .failure file (archive requests from
#           failed run) into qsserver in order to process unarchived
#           data files.
#
#  Current Owner: W Roseblade                  Date: Nov   2005
#  Reviewer: none           Date of review: 1/03/95
#
#  Tested under OS version: UNICOS unknown
#  UM   version no: 4.0  Date of test:  1/3/95
#
#  History:
#   Model
#  version  Date         Modification history:
#  4.0      22/03/95     Original version C D Perks
#  4.1      01/04/96     Remove old trigger files and .failure
#                        files on an NRUN.  Add in portable
#                        alternative to putibm to copy data. L Wiles
#  4.1      09/04/96     Remove *IF DEF METOCRAY and *ENDIF  L Wiles
#  4.1      06/06/96     Change block/record length for possible
#                        wide trigger files in CRACER system. L Wiles
#  4.1      01/08/96     Changes for restartability L.Wiles
#  4.2      17/02/97     Various corrections to code for no
#                        archiving and crash recovery.  L.Wiles
#  4.4      27/10/97     Correction to CRACERCHECK test L.Wiles
#  4.5      4/03/98      If partial archiving omit the copy of the
#                        trigger file to /u/m20/cprod/cracercheck.
#                        I Edmond
#  4.6      19/03/99     Correction of Restartability problem.
#                        W.Roseblade
#  5.1      10/07/00     Variable Classification   W.Roseblade
#  5.2      11/08/00     Replace awk & grep with UM_? (R.Hatcher)
#  5.2      30/08/00     New Header Format W.Roseblade
#  6.0      25/09/03     Remove CRACER/UABRF code W Roseblade.
#  6.0      25/09/03     R
#  6.1      22/06/04     Use TMPDIR throughout UM Scripts
#                          Anthony A. Dikcinson
#  6.2      24/11/05     Fix FAILPROC loop bug.
#  6.2      25/08/06     Remove space between #! /bin/ksh W Roseblade.
#
#
#  Programming Standard: UMDP 3, version 7.2
#
#  External documentation: UMDP Y1 Automated Post Processing System
#
#   Interface and arguments:
#
#    autopp_tidyup ,<none>
#
# ---------------------------------------------------------------------
#  Called by: top level script
#  Calls :    qsserver, restartinfo
#
#   Imports:
#    HOME                    - User HOME directory
#    ARCHSYS                 - Flag for system archiving (true/false)
#    PPCNTL                  - Front end control file
#    SETOPT                  - Shell options
#    TYPE                    - Type of run ie NRUN/CRUN
#    UMMACHINE               - Target computer platform type
#                              (eg METOCRAY)
#    DATAM                   - Experiment directory on Cray
#    TMPDIR                    - Run-time experiment directory on Cray
#    RUNID                   - Experiment name (4 characters)
#    FAILPROC                - .failure file on Cray containing
#                               archive requests to be processed
#    ERRFLAG                 - Error file written to if server failure
#    MAIL                    - Flag for automatic mailing of archive
#                              errors (M/N)
#    MAIL_ID                 - Mail address for archiving error messages
#
#
#   Exports:
#    LOCKFILE                - The existence of this file indicates
#                              whether the model is still executing
#    AUTOPPCODE              - Trap for failed trigger file transfer
#                              0 - all TF's transferred successfully
#                              1 - one or more TF's failed to transfer.
#                              2 - qsserver failed itself or it failed
#                                 to archive any remaining files.
#
#   Local variables:
#    CC                      - Completion code
#    RCSERVER                - Error return code in $ERRFLAG
#
# End of header -------------------------------------------------------
#
set -$SETOPT
echo "*****************************************************************"
echo "     Autopp_tidyup in operation"
echo "     Job started at : `date`"
echo "*****************************************************************"

cat > $ERRFLAG << EOF
F No request to stop model
EOF
RCSERVER='F'                 # Initialise server process error code
AUTOPPCODE=0                 # Initialise trap for trigger file transfer
ERRCODE=0
#L----------------------------------------------------------------------
#L          Check for restarting after a crash.
#L----------------------------------------------------------------------
cd $DATAM
. $PPCNTL
if test -s "$RUNID.thist"
then
  echo "autopp_tidyup: re-starting from a crash"

  if test -s "$RUNID.requests"
  then
    if test $ARCHSYS = 'false'
    then
      echo "************************************************"
      echo "No archiving requested"
      echo "************************************************"
      return
    fi
  fi
fi

#L----------------------------------------------------------------------
#L         Test for a failure file from previous run. If one exists
#L         then pipe contents into server. The return code from the
#L         server is required to indicate whether the model can then
#L         be run after failure file read.
#L         If the server fails for any reason it writes a message
#L         starting with 'T' to the ERRFLAG file. Otherwise ERRFLAG
#L         starts with 'F'. This letter is picked up and used as a
#L         return code.
#L----------------------------------------------------------------------
if test $AUTOPPCODE -eq 0
then
  if test -f $FAILPROC
  then
    if test $TYPE = 'CRUN'
    then
      LOCKFILE=$TMPDIR/$RUNID.lock.$$

      FAILPROC1=${FAILPROC}_1
      if test -e $FAILPROC1
      then
        echo "$FAILPROC1 exists .. previous autopptidyup failed"
        echo "Contact CRUM for assistance"
        AUTOPPCODE=2
      else
        mv $FAILPROC $FAILPROC1
        qsserver < $FAILPROC1
        CC=$?
        rm $FAILPROC1
        RCSERVER=`cat $ERRFLAG|cut -c 1`  # Return code from server
        if test $CC -eq 0 -a $RCSERVER = 'F'
        then
          : # was rm $FAILPROC1
        else
          AUTOPPCODE=2
        fi

      fi
    else
      rm $FAILPROC
    fi
  fi
fi

#L----------------------------------------------------------------------
#L         If any error encountered during Autopp_tidyup then recreate
#L         the restartfile.
#L----------------------------------------------------------------------
if test $AUTOPPCODE -ne 0  -o  $RCSERVER = 'T'
then
  echo "AUTOPPCODE IS:$AUTOPPCODE and RCSERVER IS:$RCSERVER"
  echo error encountered when tidying up..recreating the restartfile.
  restartinfo
fi

