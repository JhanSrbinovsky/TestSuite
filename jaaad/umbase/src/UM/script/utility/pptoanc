#!/bin/ksh
# *****************************COPYRIGHT******************************
# (C) Crown copyright Met Office. All rights reserved.
# For further details please refer to the file COPYRIGHT.txt
# which you should have received as part of this distribution.
# *****************************COPYRIGHT******************************
#
#  Script: pptoanc
#
#  Purpose: Script to run PPTOANC utility to create ancilliary files
#          from pp files on T3E .
#
#  Current Owner: W Roseblade    Date: 1/02/06
#  Reviewer: M Saunby            Date: 1/02/06
#
#  Tested under OS version: UNICOS unknown
#  UM   version no: <UM version>  Date of test:  <date of test>
#
#  History:
#   Model
#  version  Date         Modification history:
#    4.4    2/6/97       Original version Ian Edmond
#    4.5    01/09/98     Removed UMVERSION. K Rogers
#
#    4.5    25/08/98     Use VN in directory for executable.
#                        Initialise UM_SECTOR_SIZE. D. Robinson.
#    4.5c   31.03.99     Changed version from 4.5 to 4.5c. W Roseblade
#    5.0    2.03.99      Changed version from 4.5 to 5.0. W Roseblade
#    5.1    04.05.00     Added TARGET_MC to cater for different build
#                        configurations (R.Hatcher)
#    5.1    14/03/00     Changed version from 5.0 to 5.1. W Roseblade
#    5.2    27/07/00     Set default (general) values for EXEC.
#                        (A Van der Wal)
#    5.2    12/10/00     New Header Format W Roseblade
#    5.2    27/10/00     Set TARGET_MC using @target_mc@ tag (R.Hatcher)
#    5.3    12/12/01     Cater for exported value of EXEC (M.Hughes)
#    6.0    18/09/03     Port to NEC (E.Leung)
#    6.0    01/12/03     Change TMPDIR to point to $SCRATCH for NEC
#                        W Roseblade.
#    6.0    06/01/04     Change pptoanc.out to be unique by adding
#                        $$. W Roseblade
#    6.0    24/02/04     Correct UMDIR NEC setting to be /home/um1
#                        W Roseblade
#    6.1    24/08/04     Add 32-bit options and tidy.   P.Dando
#    6.1    10/03/04     Move units for PP files to 30 onwards,
#                        Set BIT32 variable for 32 bit file input.
#                        P. Selwood
#    6.1    15/09/04     Introduce exchange of @vn@ tag for $VN
#                        in util scripts.               P.Dando
#    6.1    23/09/04     Replace exit 0 with exit $CC.
#                        W Roseblade.
#    6.1     8/12/04     Add dev/null redirect for rm fort.* o/p
#                        to stop error messages.
#                        Make o/p file more unique by adding
#                        seconds to name W Roseblade
#    6.2    17/02/06     Removal of METOCRAY logic,code.
#                        W Roseblade
#    6.2    25/08/06     Remove space between #! /bin/ksh W Roseblade.
#    6.4    08/02/07     Change executable name from pptoanc to pptoanc.exe
#                        to resolve potential name conflicts between wrapper
#                        script and executable. R Sempers.
#
#  Programming standard: UMDP 3, version unknown
#
#  External documentation:
#    <UMDP number & name of external documentation>
#
#   Interface and arguments:
#
#   pptoanc [[-cf][-hpf]] [[-lcf][-lhpf]] -n namelist [-o]       \
#    [-l levels_file] [-32] pp_file1 [[pp_file2][pp_file3]...]  \
#           ancilliary_file
#
#   3 or more arguments as follows:
#        $1 (optional) -cf    :specifies that the pp files
#                             :contain Cray block control words.
#                             :e.g
#                             :(1) pp files that were
#                             :VBS formatted on the IBM and
#                             :transfered onto the T3E using
#                             :getibm /df=tb where the IBM BCW's are
#                             :are replaced with Cray BCW's.
#                             :(2) pp files that were created
#                             :using FORTRAN WRITE statement.
#
#                      -hpf   :specifies that the pp files were
#                             :directly copied from HP using e.g
#                             :ftp,rcp and that these are 32bit
#                             :datafiles with HP BCWs.
#
#                             :if the -cf option is NOT used the
#                             :pp files are assumed not to
#                             :contain BCW's.
#                             :e.g files which are transfered
#                             :from IBM to T3E using getibm /df=tr
#
#        $2 (optional) -lcf   :
#                             :As above but refers to the optional
#                             :levels data file.
#                      -lhpf  :
#
#        $3 -n <namelist>     :pathname of file containing namelist
#                             :specifing details of ancilliary file
#
#        $4 (optional) -l levels_file :pathname of levels file
#                                     :used to create ocean dump
#
#        $5 (optional) -o     :overwrite already existing ancilliary
#                             :file
#
#        $6 (optional) -32    :Use 32-bit version of executable
#
#        $7  pp_file1         :pathname of input pp file used in
#                             :the ancilliary file
#        $8 -> $n-1  pp_file  :pathname of input pp files used in
#                             :addition to pp_file1 to make the
#                             :ancilliary file
#
#        $n (last argument in list)   :pathname of ancilliary file
#   -------------------------------------------------------------------
#
#   Calls    : pptoanc
#
#   Imports:
#     TARGET_MC      - Name for the build configuration directory (also
#                      the name of the platform on which the model exec
#                      is run).
#     TMPDIR         - Directory in which output redirected to.
#     VN             - Script version number.
#
#   Exports:
#     PPF1
#     UM_SECTOR_SIZE -
#     UNIT22         - Stashmaster file
#     UNIT10
#     UNIT05
#     BIT32 - set to 1 if 32 bit input data
#
#   Local variables:
#     PPF1           - used to created link to pp file with fort.??
#     BUILD32        - use 32-bit executable
#     PLATFORM       - Platform
#
# End of header -------------------------------------------------------

cmessage="Usage: $0 [[-cf][-hpf]] [[-lcf][-lhpf]] -n namelist \
[-o] [-l levels_file] [-32] pp_file1 [[pp_file2][pp_file3]..] \
ancilliary_file"

if [ $# -lt 4 ]
  then
    echo $cmessage
    exit 1
fi

# Step 0 - Set up environment variables
#

PLATFORM=@platform@
# VN here is automatically set in this script at each UM build
VN=@vn@
BUILD32=${BUILD32:-n}
UMDIR=${UMDIR:-/home/um1}

# Directory for intermediate files
TMPDIR=$SCRATCH

TARGET_MC=@target_mc@
# Directory containing executable

# Directory containing executable
if [ $BUILD32 = "y" ] ; then
  EXEC=${EXEC:-$UMDIR/vn$VN/$TARGET_MC/exec32}
else
  EXEC=${EXEC:-$UMDIR/vn$VN/$TARGET_MC/exec}
fi


# UM Sector Size
UM_SECTOR_SIZE=${UM_SECTOR_SIZE:-2048}
export UM_SECTOR_SIZE
# set default for BIT32
export BIT32=0


export UNIT22=$UMDIR/vn$VN/ctldata/STASHmaster

# Step 1 -  Read filenames specified in argument list and check syntax.
#
filenum=29
namelist_set=false
pplev_cray_fmt=false
pplev_hp_fmt=false
pp_cray_fmt=false
pp_hp_fmt=false
overwrite=false

while [ $# -gt 0 ]               # Loop over all command line arguments

do
 case "$1" in

 -cf)
    pp_cray_fmt=true
    if [ $pp_hp_fmt = true ]
      then
        echo $cmessage
        exit 1
    fi
    if [ $namelist_set = true ]
      then
        echo $cmessage
        exit 1
    fi
    ;;
 -hpf)
    pp_hp_fmt=true
    if [ $pp_cray_fmt = true ]
      then
        echo $cmessage
        exit 1
    fi
    if [ $namelist_set = true ]
      then
        echo $cmessage
        exit 1
    fi
    ;;
 -lcf)
    pplev_cray_fmt=true
    if [ $pplev_hp_fmt = true ]
      then
        echo $cmessage
        exit 1
    fi
    if [ $namelist_set = true ]
      then
        echo $cmessage
        exit 1
    fi
    ;;
 -lhpf)
    pplev_hp_fmt=true
    if [ $pplev_cray_fmt = true ]
      then
        echo $cmessage
        exit 1
    fi
    if [ $namelist_set = true ]
      then
        echo $cmessage
        exit 1
    fi
    ;;
 -n)
    if [ ! -f  $2 ]            # Check input files exist.
    then

      echo "namelist $2 does not exist"
      exit 1

    fi

    export UNIT05=$2
    namelist_set=true
    shift
    ;;
 -l)
    if [ ! -f  $2 ]            # Check input files exist.
    then

      echo "levels file $2 does not exist"
      exit 1

    fi

    if [[ $PLATFORM = "CRAYPVP" || $PLATFORM = "CRAYMPP" ]] ; then
      if [ $pplev_cray_fmt = true ]
        then
         ln -s $2 fort.11
      elif [ $pplev_hp_fmt = true ]
        then
         assign -a $2 -N ieee_32 -F f77 fort.11
      else
         assign -a $2  -su fort.11
      fi
    else
      export UNIT11=$2
      export FILE2=$2
    fi
    shift
    ;;
 -o)
    overwrite=true
    ;;
 -32)
    BUILD32=y
  ;;
 *)
    if [ $namelist_set = true ]
      then

        if [ $# -gt 1 ]
          then
            filenum=`expr $filenum + 1`

            if [ ! -f  $1 ]            # Check input files exist.
              then

                echo "pp file $1 does not exist"
                rm fort.*
                exit 1

            fi
            export PPF1=$1
            if [[ $PLATFORM = "CRAYPVP" ||
                  $PLATFORM = "CRAYMPP" ]] ; then
              if [ $pp_cray_fmt = true ]
                then
                 ln -s $PPF1 fort.$filenum
              elif [ $pp_hp_fmt = true ]
                then
                 assign -a $PPF1 -N ieee_32 -F f77 fort.$filenum
              else
                 assign -a $PPF1  -su fort.$filenum
              fi
            else
              export `eval echo UNIT${filenum}`=$PPF1
              if [ $pp_hp_fmt = true ]
              then
                export BIT32=1
              fi
            fi
        elif [ $# -eq 1 ]
          then
            if [ ! -f  $1 ]
              then

                export UNIT10=$1
            else

                if [ $overwrite = true ] # overwrite existing ancilliary
                  then                   # file (for operational use)

                   echo "Overwriting file $1"
                   export UNIT10=$1
                else

                   echo "WARNING: file $1 already exists"
                   echo "Do you want to overwrite this file (y or n)?"
                   read option

                   case "$option" in

                   y)
                     export UNIT10=$1
                     ;;
                   n)
                     rm fort.*
                     exit 0
                     ;;
                   *)
                     echo "Invalid answer"
                     rm fort.*
                     exit 1
                     ;;
                   esac

                fi

            fi
        else
          echo $cmessage
          rm fort.*
          exit 1
        fi


    else
      echo $cmessage
       exit 1
    fi
    ;;
    esac
    shift
    done

# Step 2 - Execute utility & print out messages.
#
# get date in seconds, chop last 5 digits for more unique o/p name.

stamp=`date +%s|cut -c6-10`
pptoancout=${TMPDIR}/pptoanc.out.$$.$stamp

$EXEC/pptoanc.exe 1> $pptoancout 2>&1

CC=$?
if test $CC != 0
then

cat $pptoancout
echo PPTOANC failed

fi

echo 'PPTOANC output in:' $pptoancout

# Step 3 - Delete temporary files and exit
#
rm fort.* 1>/dev/null 2>&1
exit $CC
