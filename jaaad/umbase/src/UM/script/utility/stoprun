#!/bin/ksh
# *****************************COPYRIGHT******************************
# (C) Crown copyright Met Office. All rights reserved.
# For further details please refer to the file COPYRIGHT.txt
# which you should have received as part of this distribution.
# *****************************COPYRIGHT******************************
#
# WARNING this has only been tested on the CRAY & HP (24/11/94)
#
#  Script:  stoprun
#
#  Purpose: Write to the errflag file associated with a run a
#           message telling the model to stop.
#
#  Current Owner: W Roseblade    Date: 1/02/06
#  Reviewer: M Saunby            Date: 1/02/06
#
#  Tested under OS version: UNICOS 6.1.5A
#  UM version no: 1.0       Date of test: 16 June 1992
#
#  History:
#   Model
#  version  Date         Modification history:
#    4.0    01/03/95     After a crash there could be more than one
#                        /tmp/nqs* directory per run on the Cray.
#                        Added loop to write to ERRFLAG file in each
#                        such directory, to ensure run is stopped.
#                        K Rogers
#    4.0    06/10/95     Distinguish between operator and user stopruns.
#                        K Rogers
#    4.3    05/06/97     Added code to ensure, a call to stoprun by an
#                        operator, is only applied to jobs in a given
#                        list of queues.  (S Robertson)
#    4.4    05/06/97     Tidied up format of echo statements. K Rogers
#    5.2    11/08/00     Replace awk & grep with UM_? (R.Hatcher)
#    5.2    20/09/00     New Header Format W Roseblade
#    5.4    14/05/02     Define UM_GREP & UM_AWK for stoprun by user
#                        E.Leung
#    6.0    01/12/03     Change for the NEC. A. A. Dickinson
#    6.2    17/02/06     Removal of METOCRAY,CRAYPVP logic,code.
#                        W Roseblade
#  6.2      25/08/06     Remove space between #! /bin/ksh W Roseblade.
#
#  Programming standard: UM Doc Paper 3A, version 1 (29/10/90)
#
#  External documentation:
#    UM Doc Paper ??? C0
#
#   Interface and arguments:  stoprun [-o] runid
#    eg.  stoprun cabcd          (for user with runid cabcd)
#
#
#     $1   - RUNID of model
#     -o   - should be set ONLY if called by operator
#
#   -------------------------------------------------------------------
#
#   Called by: user or operator
#   Calls    : none
#
#  Imports:
#   OPSTARTDIR - directory in which the restart file for a run is kept
#                (default path is set in script and used if the var
#                 is unset)
#   OPTIND     - Shell options
#   OPTION     - Shell options
#   TEMP       - Temp directory
#
#  Exports:
#   TEMP      - /tmp/nqs*
#
#  Local variables:
#   CC         - Error return code
#   ERRFLAG    - pathname of error flag file.
#   ERRFLAGS   - pathname of error flag file.
#   OPQLIST    - O(perator)Q(ueue)LIST a file with the names of queues
#                which an operator can stoprun jobs in
#   OPSR       - Operator Stoprun flag (true/false)
#   OPSTARTDIR - the directory where restart files are located
#   QINFO      - Name of queue the job you wish to stoprun currently
#                runs in
#   QLIST      - : separated list of queues names
#   QSUBREQID  - is the qsub nqs identifier for the job
#   RUNID      - $1 the runid of the model
#   STOPMSG    - string in ERRFLAG defining whether stopped by
#                user or operator
#   WORKLEFT   - Workleft flag (true/false)
#
#   End of header -----------------------------------------------------
# Please specify $TMPDIR in setvars
TEMP=$TMPDIR
export TEMP

#L
#L Step 0 - check arguments to script correct
#L
if test $# -lt 1
then
   echo " @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
   echo " @ You must supply the five character runid for your model @"
   echo " @ The correct way of running this script is               @"
   echo " @                                                         @"
   echo " @   stoprun runid                                         @"
   echo " @                                                         @"
   echo " @ where runid is the experiment name eg cai7a             @"
   echo " @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
   exit
fi

# Find whether stoprun has been called by operator or user

STOPMSG='stoprun: User'
OPSR=false      # OP(erator)S(top)R(un) - default is false

while getopts o OPTION
do
  case $OPTION in
    o)
      # set the (operator) stoprun message
      STOPMSG='stoprun: Operator'
      # set flag to indicate this is an operator stoprun
      OPSR=true ;;
    *) echo "This option is invalid continuing with stoprun."
       break;;
   esac
done

if (( $OPTIND > 1 ))
then
  (( numswitches = OPTIND - 1))
  shift numswitches
fi

RUNID=$1

# set up path for UM_GREP and UM_AWK
UM_GREP=${UM_GREP:-grep}
UM_AWK=${UM_AWK:-awk}
# Carry out checks for an operator stoprun
if [[ "$OPSR" = true ]]
then
  # set up paths
  OPSTARTDIR=${OPSTARTDIR:-/u/m20/cprod/opstartinfo/}
  OPQLIST=${OPQLIST:-/u/m20/cprod/opqlist}

  # get a list of queues which may be stoprunned by an operator
  QLIST=`cat $OPQLIST`

  WORKLEFT=true

  while $WORKLEFT
  do
    # get the qsub request id
    QSUBREQID=`$UM_AWK -F= /SUB_NQSREQUEST/'{print $2}' \
$OPSTARTDIR/$RUNID* 2>&1`

    CC=$?
    if test $CC -ne 0 -o "$QSUBREQID" = ""
    then
      echo "stoprun: failed to get queue information for $RUNID, \r
continuing operator stoprun."
      break
    fi

    # get name of queue the job wish to stoprun is currently running in
    # Meto CRAY
QINFO=`qstat.new | $UM_AWK "/$QSUBREQID/"'{print $4}'`

    CC=$?
    if test $CC -ne 0 -o "$QINFO" = ""
    then
      echo "stoprun: failed to get queue information for $RUNID, \r
continuing operator stoprun."
      break
    fi

    if [[ "$QLIST" = *"$QINFO"* ]]
    then
      # the job is running in a valid queue for an operator stoprun
      echo $STOPMSG
      # completed checks for operator stoprun no work left exit loop
      WORKLEFT=false
    else
      echo "Operator stoprun requested for job not in queue"
      cat "$OPQLIST"
      echo "Nothing done exiting."
      exit 2
    fi
  done
fi

#L
#L Step 1 - find location of errflag file for this run
#L

USR_TMP_DIR=`$UM_AWK -F= /TMP_LOCATION/'{print $2}' \
              $OPSTARTDIR/$RUNID* 2>&1`
ERRFLAG=$USR_TMP_DIR/$RUNID.errflag
CC=$?
if test $CC -ne 0
then
  echo "========================================================"
  echo " Running $0 - script to stop a model run"
  echo " Script has failed to find file $RUNID.errflag"
  echo "in any directory under $TEMP.  If your model has finished"
  echo "compiling and started running please report this problem."
  echo "(Note that jobs cannot be stoprunned until they start running.)"
  echo "========================================================"
else
#L
#L Step 2 - overwrite present message with one to cause the run to stop
#L          going through each errflagfile found
#L
for ERRFLAG in $ERRFLAGS
do
cat > $ERRFLAG << EOF
T $STOPMSG request to stop model run `date`
EOF
  CC=$?
  if test $CC -ne 0
  then
    echo "========================================================"
    echo "$0 failed to write to errflag $ERRFLAG at `date`"
    echo "========================================================"
  else
    echo "========================================================"
    echo "$0 sent request to stop run using $ERRFLAG at `date`"
    echo "========================================================"
  fi
done
fi

#L----------------------------------------------------------------------
